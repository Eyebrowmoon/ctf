#!/usr/bin/python

from math import pow
from decimal import *
import math

import numpy as np

def power_floor(n, k):
  return int(math.exp(1.0 / k * math.log(n)))

n_str = 'ad:a4:23:49:31:4f:83:fd:a0:74:99:a3:ca:c1:b6:37:ea:5c:e3:43:47:50:d4:9f:89:d3:13:46:ae:a5:b7:d6:a6:b0:2c:30:95:67:7d:75:d4:49:60:88:6f:f9:fa:6f:e6:c3:3e:42:c7:7d:85:74:aa:e6:b9:e7:0b:09:ba:85:97:01:e8:64:ca:8d:13:fb:69:3a:8a:3b:9f:19:06:df:46:66:26:e3:a0:8a:a3:f3:25:27:b8:c8:d7:7d:4b:cc:22:21:ed:9c:cc:38:fa:c6:01:88:56:e6:ce:ce:5d:76:95:2a:69:7c:36:e2:66:38:a0:7f:33:ba:04:53:70:4b'

n_str = n_str.strip().replace(':', '')
n = int(n_str, 16)

enc1 = 115315198713382135797440540227113430690968171125852993395702029375274028471192360943357037928629244669585172070331159337090744898586331687411785677976738467961365974280317164868249654358257586889989452931851291934917098192967220967904473567448390934240531977964883869602854065432529794908526933094118193554539
enc2 = 8950441184679611266780389416231958382541987785628934981029077101336676516194491914004653753689037780080968925880912691433529762951783670062170814898283212682841778234938413521695237290299851071879798908187384006375708885024345799168606810404458208459365261314798960721719267767451013009137481683535873650117

nOver3 = n ** (1/3)

def iroot(k, n):
  u, s = n, n+1
  while u < s:
    s = u
    t = (k-1) * s + n // pow(s, k-1)
    u = t // k
  return s

coeff = [1, (3 * enc1 - 3 * enc2), (3 * enc1 * enc1 + 21 * enc1 * enc2 + 3 * enc2 * enc2), (enc1 - enc2) ** 3]

print coeff

roots = np.roots(coeff)

print roots
